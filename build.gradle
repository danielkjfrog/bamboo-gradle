/*
 * Copyright (C) 2013 JFrog Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * There are 2 ways to activate the Artifactory Build-Info plugin.
 * 1. use apply from directly from the build.gradle as shown below.
 * 2. use the init script "gradle --init-script init.gradle" ATTENTION: Check the URL inside this init.gradle
 * 3. Copy the init.gradle to your ~/.gradle directory and execute normally. ATTENTION: Now the Artifactory URL will
 * always be applied to all your projects.
 *
 * Check the URL that apply uses to get the remote script
 *
 */
buildscript {
  repositories {
    jcenter()
	mavenLocal()
	
	maven {
		url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
	}

    dependencies {
      classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '3.0.x-SNAPSHOT')
    }  
  }
}


import java.text.SimpleDateFormat

def globalVersion = new Version('3.0.x-SNAPSHOT')

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
}

allprojects {
    //apply plugin: 'com.jfrog.artifactory-upload'
    group = 'org.jfrog.test.gradle.publish'
    version = globalVersion
    status = version.status
}

artifactoryPublish.skip = true

project('services') {
    artifactoryPublish.skip = true
}

configure(javaProjects()) {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    dependencies {
        testCompile 'junit:junit:4.7'
    }
    //manifest.mainAttributes(provider: 'gradle')

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact(file("$rootDir/gradle.properties")) // deploy arbitrary file
            }
        }
    }
}

/*
artifactoryPublish.skip = true

artifactory {
    clientConfig.setIncludeEnvVars(true)
    clientConfig.info.addEnvironmentProperty('test.adding.dynVar',new java.util.Date().toString())
    //clientConfig.info.setBuildName('new-strange-name')
    //clientConfig.info.setBuildNumber(new java.util.Random(System.currentTimeMillis()).nextInt(20000).toString())

    //contextUrl = 'http://repo.jfrog.org/artifactory'
    contextUrl = 'http://localhost:8080/artifactory'
    publish {
        repository {
            repoKey = 'gradle-repo'
            username = 'admin'
            password = 'password'
            ivy {
                ivyLayout = '[organization]/[module]/ivy-[revision].xml'
            }
        }
        defaults {

	        publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
	        publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
	        publishPom = true         //Publish generated POM files to Artifactory (true by default)
	        publishIvy = false        //Publish generated Ivy descriptor files to Artifactory (false by default)
        }
    }
    resolve {
        repoKey = 'repo'
    }
}
*/
class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }
    String toString() {
        thisVersion
    }
}
